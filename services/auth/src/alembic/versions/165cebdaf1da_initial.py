"""initial

Revision ID: 165cebdaf1da
Revises: 
Create Date: 2025-04-21 12:48:37.934410

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '165cebdaf1da'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("CREATE SCHEMA IF NOT EXISTS auth")

    op.create_table('roles',
    sa.Column('name', sa.Text(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('uuid', sa.UUID(), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), nullable=False),
    sa.Column('modified_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('uuid'),
    sa.UniqueConstraint('name'),
    sa.UniqueConstraint('uuid'),
    schema='auth'
    )
    op.create_table('users',
    sa.Column('email', sa.Text(), nullable=False),
    sa.Column('password', sa.String(length=255), nullable=False),
    sa.Column('role_uuid', sa.UUID(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('uuid', sa.UUID(), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), nullable=False),
    sa.Column('modified_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['role_uuid'], ['auth.roles.uuid'], ),
    sa.PrimaryKeyConstraint('uuid'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('uuid'),
    schema='auth'
    )
    op.create_table('login_history',
    sa.Column('uuid', sa.UUID(), nullable=False),
    sa.Column('user_uuid', sa.UUID(), nullable=True),
    sa.Column('user_agent', sa.Text(), nullable=True),
    sa.Column('login_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['user_uuid'], ['auth.users.uuid'], ),
    sa.PrimaryKeyConstraint('uuid'),
    sa.UniqueConstraint('uuid'),
    schema='auth'
    )
    op.create_table('refresh_tokens',
    sa.Column('token', sa.Text(), nullable=False),
    sa.Column('user_uuid', sa.UUID(), nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), nullable=False),
    sa.Column('expiration_date', postgresql.TIMESTAMP(), nullable=False),
    sa.ForeignKeyConstraint(['user_uuid'], ['auth.users.uuid'], ),
    sa.PrimaryKeyConstraint('token'),
    sa.UniqueConstraint('token'),
    schema='auth'
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('refresh_tokens', schema='auth')
    op.drop_table('login_history', schema='auth')
    op.drop_table('users', schema='auth')
    op.drop_table('roles', schema='auth')
    # ### end Alembic commands ###
