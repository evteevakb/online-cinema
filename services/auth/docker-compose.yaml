services:

  auth:
    build:
      context: src
      dockerfile: Dockerfile
    container_name: auth
    depends_on:
      auth-db:
        condition: service_healthy
      auth-redis:
        condition: service_healthy
    env_file:
      - envs/.db.env
      - envs/.redis.env
      - envs/.service.env
    expose: [8000]
    healthcheck:
      test: curl -s http://$${API_HOST}:$${API_PORT}/api/health || exit 1
      interval: 30s
      timeout: 5s
      retries: 3
    image: auth:latest
    networks: [auth-network]
    ports: ["80:8000"]
    restart: always

  auth-db:
    container_name: auth-db
    env_file: envs/.db.env
    expose: [5432]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    image: postgres:17.2
    networks: [auth-network]
    restart: always
    volumes:
      - auth-db-data:/var/lib/postgresql/data

  auth-redis:
    container_name: auth-redis
    entrypoint: ["/bin/bash", "-c", "/entrypoint.sh"]
    env_file:
      - envs/.redis.env
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 10s
      retries: 5
    image: redis:7.4.2
    expose: [6379]
    networks: [auth-network]
    restart: always
    volumes:
      - auth-redis-data:/data
      - ../../init/redis/entrypoint.sh:/entrypoint.sh

volumes:
  auth-db-data:
  auth-redis-data:

networks:
  auth-network:
    driver: bridge
